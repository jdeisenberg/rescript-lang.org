// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import FuseJs from "fuse.js";
import * as Markdown from "./Markdown.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Router from "next/router";
import * as GithubSlugger from "github-slugger";
import Decorator_asMdx from "misc_docs/syntax/decorator_as.mdx";
import Decorator_moduleMdx from "misc_docs/syntax/decorator_module.mdx";
import Controlflow_ifelseMdx from "misc_docs/syntax/controlflow_ifelse.mdx";

var render = (function(c) {
      return React.createElement(c, {});
    });

function toString(t) {
  switch (t) {
    case /* Decorators */0 :
        return "Decorators";
    case /* ControlFlow */1 :
        return "Control Flow";
    case /* Operators */2 :
        return "Operators";
    case /* Other */3 :
        return "Other";
    
  }
}

function SyntaxLookupWidget$Category(Props) {
  var title = Props.title;
  var children = Props.children;
  return React.createElement("div", undefined, React.createElement("h3", {
                  className: "font-sans font-black text-night-light tracking-wide text-xs uppercase"
                }, title), children);
}

var allItems = [
  {
    keywords: ["@bs.module"],
    name: "@module",
    summary: "This is the @module decorator.",
    category: /* Decorators */0,
    component: Decorator_moduleMdx
  },
  {
    keywords: ["@bs.as"],
    name: "@as",
    summary: "This is the @as decorator.",
    category: /* Decorators */0,
    component: Decorator_asMdx
  },
  {
    keywords: [
      "if",
      "else",
      "if else"
    ],
    name: "if / else",
    summary: "This is the if / else control flow structure.",
    category: /* ControlFlow */1,
    component: Controlflow_ifelseMdx
  }
];

console.log(Decorator_asMdx.frontmatter);

var fuseOpts = {
  shouldSort: false,
  includeScore: true,
  threshold: 0.2,
  location: 0,
  distance: 30,
  minMatchCharLength: 1,
  keys: [
    "keywords",
    "name"
  ]
};

var fuse = new FuseJs(allItems, fuseOpts);

function getAnchor(path) {
  var match = path.split("#");
  if (match.length !== 2) {
    return ;
  } else {
    return match[1];
  }
}

function SyntaxLookupWidget$SearchBox(Props) {
  var onChange = Props.onChange;
  return React.createElement("div", {
              className: "bg-"
            }, React.createElement("input", {
                  className: "border border-snow-dark bg-snow-light",
                  type: "text",
                  onChange: onChange
                }));
}

function SyntaxLookupWidget$Tag(Props) {
  var text = Props.text;
  return React.createElement("span", {
              className: "bg-fire-15 p-1 px-2 font-semibold rounded-lg text-fire text-16"
            }, text);
}

function SyntaxLookupWidget$DetailBox(Props) {
  var summary = Props.summary;
  var children = Props.children;
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "text-21 text-center mb-4 font-semibold"
                }, summary), React.createElement("div", {
                  className: "border rounded-lg shadow-xs p-4"
                }, children));
}

function SyntaxLookupWidget(Props) {
  var router = Router.useRouter();
  var match = React.useState(function () {
        return /* ShowAll */0;
      });
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          var anchor = getAnchor(router.asPath);
          if (anchor !== undefined) {
            Belt_Option.forEach(Caml_option.undefined_to_opt(allItems.find(function (item) {
                          return GithubSlugger.slug(item.name) === anchor;
                        })), (function (item) {
                    return Curry._1(setState, (function (param) {
                                  return {
                                          TAG: 1,
                                          _0: item,
                                          [Symbol.for("name")]: "ShowDetails"
                                        };
                                }));
                  }));
          }
          
        }), []);
  React.useEffect((function () {
          var match = getAnchor(router.asPath);
          var exit = 0;
          if (typeof state === "number" || !state.TAG) {
            exit = 1;
          } else {
            var item = state._0;
            if (match !== undefined) {
              var slug = GithubSlugger.slug(item.name);
              if (slug !== match) {
                router.replace("syntax-lookup#" + match);
              }
              
            } else {
              router.replace("syntax-lookup#" + GithubSlugger.slug(item.name));
            }
          }
          if (exit === 1) {
            if (match !== undefined) {
              router.replace("syntax-lookup");
            }
            
          }
          
        }), [state]);
  var onChange = function (evt) {
    evt.preventDefault();
    var value = evt.target.value;
    return Curry._1(setState, (function (param) {
                  if (value === "") {
                    return /* ShowAll */0;
                  }
                  var filtered = Belt_Array.map(fuse.search(value), (function (m) {
                          return m.item;
                        }));
                  if (filtered.length === 1) {
                    return {
                            TAG: 1,
                            _0: filtered[0],
                            [Symbol.for("name")]: "ShowDetails"
                          };
                  } else {
                    return {
                            TAG: 0,
                            _0: filtered,
                            [Symbol.for("name")]: "ShowFiltered"
                          };
                  }
                }));
  };
  var details;
  if (typeof state === "number" || !state.TAG) {
    details = null;
  } else {
    var item = state._0;
    details = React.createElement("div", {
          className: "mb-16"
        }, React.createElement(SyntaxLookupWidget$DetailBox, {
              summary: item.summary,
              children: render(item.component)
            }));
  }
  var initial = Belt_Array.map([
        /* Decorators */0,
        /* Operators */2,
        /* ControlFlow */1,
        /* Other */3
      ], (function (cat) {
          return [
                  toString(cat),
                  []
                ];
        }));
  var items;
  items = typeof state === "number" ? allItems : (
      state.TAG ? [] : state._0
    );
  var categories = Belt_Array.reduce(Js_dict.entries(Belt_Array.reduce(items, Js_dict.fromArray(initial), (function (acc, item) {
                  var key = toString(item.category);
                  return Belt_Option.mapWithDefault(Js_dict.get(acc, key), acc, (function (items) {
                                items.push(item);
                                acc[key] = items;
                                return acc;
                              }));
                }))), [], (function (acc, entry) {
          var items = entry[1];
          if (items.length === 0) {
            return acc;
          }
          var title = entry[0];
          var children = Belt_Array.map(items, (function (item) {
                  var onMouseDown = function (evt) {
                    evt.preventDefault();
                    return Curry._1(setState, (function (param) {
                                  return {
                                          TAG: 1,
                                          _0: item,
                                          [Symbol.for("name")]: "ShowDetails"
                                        };
                                }));
                  };
                  return React.createElement("span", {
                              key: item.name,
                              className: "mr-2 cursor-pointer",
                              onMouseDown: onMouseDown
                            }, React.createElement(SyntaxLookupWidget$Tag, {
                                  text: item.name
                                }));
                }));
          var el = React.createElement(SyntaxLookupWidget$Category, {
                title: title,
                children: children,
                key: title
              });
          acc.push(el);
          return acc;
        }));
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "text-center"
                }, React.createElement(Markdown.H1.make, {
                      children: "Syntax Lookup"
                    }), React.createElement("div", {
                      className: "mb-8"
                    }, "Enter some language construct you want to know more about."), React.createElement("div", undefined, React.createElement(SyntaxLookupWidget$SearchBox, {
                          onChange: onChange
                        }))), React.createElement("div", {
                  className: "mt-10"
                }, details, categories));
}

var make = SyntaxLookupWidget;

export {
  make ,
  
}
/* allItems Not a pure module */
